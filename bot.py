import os
import re
import requests
import asyncio
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render / –ª–æ–∫–∞–ª—å–Ω–æ

HEADERS = {"User-Agent": "Mozilla/5.0 (compatible; MusicBot/1.0)"}

# --- –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ rus.hitmotop —á–µ—Ä–µ–∑ DuckDuckGo HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def search_hitmotop(query, max_results=5):
    """
    –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–∞ https://rus.hitmotop.com/song/<id> —á–µ—Ä–µ–∑ DuckDuckGo HTML.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ URL'–æ–≤ (–º–∞–∫—Å–∏–º—É–º max_results).
    """
    ddg_url = "https://html.duckduckgo.com/html/"
    params = {"q": f"site:rus.hitmotop.com/song {query}"}
    try:
        resp = requests.post(ddg_url, data=params, headers=HEADERS, timeout=15)
        resp.raise_for_status()
    except Exception as e:
        print("Search request failed:", e)
        return []

    links = []
    soup = BeautifulSoup(resp.text, "html.parser")
    for a in soup.find_all("a", href=True):
        href = a["href"]
        # DuckDuckGo returns direct links or redirects; try to extract real rus.hitmotop links
        if "rus.hitmotop.com/song/" in href:
            # Clean up href if it's a redirect
            m = re.search(r"(https?://rus\.hitmotop\.com/song/\d+)", href)
            if m:
                url = m.group(1)
            else:
                url = href.split("&uddg=")[-1] if "uddg=" in href else href
            if url not in links:
                links.append(url)
        if len(links) >= max_results:
            break
    return links

def extract_song_info(song_url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç title/artist –∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ mp3 (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (title, mp3_url) –∏–ª–∏ (None, None) –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
    """
    try:
        resp = requests.get(song_url, headers=HEADERS, timeout=15)
        resp.raise_for_status()
    except Exception as e:
        print("Failed to fetch song page:", e)
        return None, None

    soup = BeautifulSoup(resp.text, "html.parser")

    # –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
    title = None
    # 1) <h1> —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ
    h1 = soup.find("h1")
    if h1 and h1.text.strip():
        title = h1.text.strip()
    # 2) meta og:title
    if not title:
        og = soup.find("meta", property="og:title")
        if og and og.get("content"):
            title = og["content"].strip()

    # –ò—â–µ–º mp3 —Å—Å—ã–ª–∫—É: <a href="...mp3">, <audio><source src="...">, meta og:audio
    mp3_url = None
    # a tags
    for a in soup.find_all("a", href=True):
        href = a["href"]
        if href.lower().endswith(".mp3") or ".mp3?" in href.lower():
            mp3_url = href
            break
        # –∏–Ω–æ–≥–¥–∞ —Å—Å—ã–ª–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏ –≤–µ–¥—ë—Ç –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: –∏—â–µ–º /download/ –∏–ª–∏ /get/
        if "/get/" in href or "/download" in href:
            if href.lower().endswith(".mp3") or ".mp3" in href:
                mp3_url = href
                break

    # audio/source tags
    if not mp3_url:
        audio = soup.find("audio")
        if audio:
            src = audio.get("src")
            if src and ".mp3" in src:
                mp3_url = src
            else:
                source = audio.find("source")
                if source and source.get("src"):
                    mp3_url = source["src"]

    # meta og:audio
    if not mp3_url:
        og_audio = soup.find("meta", property="og:audio")
        if og_audio and og_audio.get("content"):
            mp3_url = og_audio["content"]

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL'—ã
    if mp3_url and mp3_url.startswith("/"):
        base = re.match(r"https?://[^/]+", song_url)
        if base:
            mp3_url = base.group(0) + mp3_url

    # –ò–Ω–æ–≥–¥–∞ mp3 —Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ JS ‚Äî —ç—Ç–æ –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è (—Å–ª–æ–∂–Ω–µ–µ)
    return title or "Unknown title", mp3_url

def download_file(url, filename):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ filename. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
    """
    try:
        with requests.get(url, headers=HEADERS, stream=True, timeout=30) as r:
            r.raise_for_status()
            with open(filename, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
        return True
    except Exception as e:
        print("Download failed:", e)
        return False

# --- Telegram handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ‚Äî —è –Ω–∞–π–¥—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ rus.hitmotop.com –∏ –ø—Ä–∏—à–ª—é —Ç—Ä–µ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)."
    )

async def handle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.")
        return

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg = await update.message.reply_text("üîé –ò—â—É —Ç—Ä–µ–∫–∏ –Ω–∞ rus.hitmotop.com...")

    # –í—ã–ø–æ–ª–Ω–∏–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_running_loop()
    links = await loop.run_in_executor(None, search_hitmotop, query, 5)

    if not links:
        await msg.edit_text("–ù–µ –Ω–∞—à—ë–ª –Ω–∏—á–µ–≥–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
        return

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ)
    options = []
    for url in links:
        info = await loop.run_in_executor(None, extract_song_info, url)
        title, mp3 = info if info else (None, None)
        options.append({"title": title or url, "url": url, "mp3": mp3})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    buttons = []
    for i, item in enumerate(options):
        btn = InlineKeyboardButton(f"{i+1}. {item['title']}", callback_data=f"choose|{i}")
        buttons.append([btn])

    await msg.edit_text("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ (–Ω–∞–∂–º–∏, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å):", reply_markup=InlineKeyboardMarkup(buttons))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º options –≤ context.user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
    context.user_data["search_results"] = options

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith("choose|"):
        return
    idx = int(data.split("|", 1)[1])
    options = context.user_data.get("search_results")
    if not options or idx < 0 or idx >= len(options):
        await query.edit_message_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∏–ª–∏ –∏—Å—Ç—ë–∫ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    item = options[idx]
    title = item.get("title", "Track")
    mp3 = item.get("mp3")
    song_page = item.get("url")

    if not mp3:
        # –ï—Å–ª–∏ mp3 –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∑–∞–Ω–æ–≤–æ (–∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏)
        await query.edit_message_text("–ò—â—É –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ mp3...")
        loop = asyncio.get_running_loop()
        title, mp3 = await loop.run_in_executor(None, extract_song_info, song_page)
        if not mp3:
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ mp3 –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.")
            return

    # –°–∫–∞—á–∏–≤–∞–µ–º mp3 –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await query.edit_message_text(f"–°–∫–∞—á–∏–≤–∞—é ¬´{title}¬ª ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    filename = f"/tmp/{re.sub(r'[^a-zA-Z0-9_.-]', '_', title)}.mp3"
    loop = asyncio.get_running_loop()
    ok = await loop.run_in_executor(None, download_file, mp3, filename)
    if not ok:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        with open(filename, "rb") as audio_f:
            await context.bot.send_audio(chat_id=query.message.chat_id, audio=audio_f, title=title)
    except Exception as e:
        print("Send failed:", e)
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤ —á–∞—Ç.")
    finally:
        try:
            os.remove(filename)
        except Exception:
            pass

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main():
    token = BOT_TOKEN
    if not token:
        print("Error: please set BOT_TOKEN environment variable.")
        return

    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search))
    app.add_handler(CallbackQueryHandler(handle_choice))
    print("Bot started.")
    app.run_polling()

if __name__ == "__main__":
    main()
